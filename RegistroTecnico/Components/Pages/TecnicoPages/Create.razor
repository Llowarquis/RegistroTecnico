@page "/Tecnicos/Create"
@inject TecnicoServices tecnicoServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>
<EditForm Model="tecnico" OnValidSubmit="Agregar">
    <DataAnnotationsValidator />
    @*Formulario*@
    <div class="container">
        <div class="shadow-lg">
            @*Header*@
            <div class="card-header text-center">
                <h3><strong>Crear nuevo Tecnico</strong></h3>
            </div>
            @*Body*@
            <div class="card-body">
                <div class="row">
                    @*Id*@
                    <div class="col-1">
                        <label class="form-label"><strong>ID</strong></label>
                        <InputNumber class="form-control" @bind-Value="tecnico.tecnicoId" readonly></InputNumber>
                    </div>

                    @*Nombre*@
                    <div class="col-3 ms-5">
                        <label class="form-label"><strong>Nombre</strong></label>
                        <InputText class="form-control" @bind-Value="tecnico.nombre" DisplayName="Nombre"></InputText>
                        <ValidationMessage For="(()=> tecnico.nombre)" />
                    </div>

                    @*Sueldo Hora*@
                    <div class="col-3 ms-5">
                        <label class="form-label"><strong>Sueldo Hora</strong></label>
                        <InputNumber class="form-control" @bind-Value="tecnico.sueldoHora"></InputNumber>
                        <ValidationMessage For="(()=> tecnico.sueldoHora)" />
                    </div>
                </div>
            </div>
            @*Footer*@
            <div class="card-footer text-center">
                <button type="button" class="btn btn-primary" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-success"@onclick="Agregar">Agregar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    public Tecnico tecnico { get; set; } = new Tecnico();
    public string Mensaje { get; set; } = string.Empty;


    public async Task Agregar()
    {
        if(await Validar())
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ya existe un tecnico con ese nombre...");
            return;
        }

        var crear = await tecnicoServices.Guardar(tecnico);

        if (crear)
        {  
            await JSRuntime.InvokeVoidAsync("alert", "El Tecnico se creo correctamente!");
            navigationManager.NavigateTo("/Tecnicos/Index");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ha ocurrido un error al crear el tecnico...");
            navigationManager.NavigateTo("/Tecnicos/Index");
        }
        
	}

	private async Task<bool> Validar()
	{
		var existe = await tecnicoServices.ExisteNombre(tecnico?.nombre);
		return existe;
	}

	public void Volver()
	{
		navigationManager.NavigateTo("/Tecnicos/Index");
	}
}
