@page "/TipoTecnicos/Create"

@inject IJSRuntime JSRuntime
@inject TipoTecnicoServices tipoTecnicoService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Create Tipo T&eacute;cnicos</PageTitle>
<EditForm Model="tipoTecnicos" OnValidSubmit="Agregar">
<DataAnnotationsValidator />
    @*Formulario*@
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header text-center">
                <h3><strong>Crear nuevo Tipo de T&eacute;cnico</strong></h3>
            </div>
            @*Body*@
            <div class="card-body">
                @*Id*@
                <div class="col-1 ms-5">
                    <label class="form-label"><strong>ID</strong></label>
                    <InputNumber class="form-control" @bind-Value="tipoTecnicos.TipoTecnicoId" readonly></InputNumber>
                </div>

                @*Descripcion*@
                <div class="col-2 ms-5">
                    <label class="form-label"><strong>Descripci&oacute;n</strong></label>
                    <InputText placeholder="Descricip&oacute;n" class="form-control" @bind-Value="tipoTecnicos.Descripcion"></InputText>
                    <ValidationMessage For="@(() =>tipoTecnicos.Descripcion)" />
                </div>
            </div>
        </div>
        @*Footer*@
        <div class="card-footer text-center">
            <button type="button" class="btn btn-primary bi bi-chevron-double-left" @onclick="Volver"> Volver   </button>
            <button type="submit" class="btn btn-success bi bi-floppy-fill" @onclick="Agregar">   Agregar    </button>
        </div>
    </div>
</EditForm>

@code {
    private TipoTecnicos tipoTecnicos { get; set; } = new TipoTecnicos();
    public Tecnicos tecnico { get; set; } = new Tecnicos();
    public List<TipoTecnicos> ListaTipoTecnicos { get; set; } = new List<TipoTecnicos>();

    protected override async Task OnInitializedAsync()
    {
        ListaTipoTecnicos = await tipoTecnicoService.Listar(t => t.TipoTecnicoId > 0);
    }

    public async Task Agregar()
    {
        if(await Validar())
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ya existe un tecnico con ese nombre...");
            return;
        }

        var crear = await tipoTecnicoService.Guardar(tipoTecnicos);

        if (crear)
        {  
            await JSRuntime.InvokeVoidAsync("alert", "El Tecnico se creo correctamente!");
            navigationManager.NavigateTo("/TipoTecnicos/Index");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ha ocurrido un error al crear el tecnico...");
            navigationManager.NavigateTo("/TipoTecnicos/Index");
        }
        
	}

	private async Task<bool> Validar()
	{
		var existe = await tipoTecnicoService.ValidarDescripcion(tipoTecnicos.Descripcion);
		return existe;
	}

	public void Volver()
	{
		navigationManager.NavigateTo("/TipoTecnicos/Index");
	}
}
